name: Docker Image CI with Minikube Deployment

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx (Optional)
      uses: docker/setup-buildx-action@v2  # Optional for multi-platform builds

    - name: Cache Docker layers (Optional)
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache  # Adjust path if using Buildx
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build the Docker image
      run: |
        docker build . -f Dockerfile -t dileep10/myi:latest

    - name: Push the Docker image to Docker Hub (Optional)
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push dileep10/myi:latest  # Optional step

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Start Minikube (using docker driver)
      run: minikube start  # No need for --driver option

    - name: Verify Minikube Status (Optional)
      run: minikube status  # Check if Minikube is already running

    - name: Install Kubectl (Optional, if not already installed)
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'  # Adjust version if needed

    - name: Use Minikube kubectl context
      run: kubectl config use-context minikube

    - name: Verify working directory (Optional)
      run: pwd

    - name: Check for deployment.yaml
      run: ls deployment.yaml

    - name: Deploy to Minikube (with error handling)
      run: |
        kubectl apply -f deployment.yaml --validate=false

        # Choose one of the following error handling approaches:

        # Option 1: Check exit code in the same step (using if statement)
        if [ ${{ steps.deploy.exit_code }} -ne 0 ]; then
          echo "Deployment failed!"
          exit 1
        fi

        # Option 2: Check exit code in a separate step (uncomment if preferred)
        # - name: Check deployment status (Optional)
        #   run: |
        #     if [ ${{ steps.deploy.exit_code }} -ne 0 ]; then
        #       echo "Deployment failed!"
        #       exit 1
        #     fi

    - name: Get Service NodePort (Optional)
      id: get-nodeport
      run: |
        kubectl get service -o jsonpath="{.items[0].spec.ports[0].nodePort}"

    - name: Test Application (Optional)
      run: |
        curl http://localhost:${{ steps.get-nodeport.outputs.nodePort }}  # Access service (if NodePort retrieved)
